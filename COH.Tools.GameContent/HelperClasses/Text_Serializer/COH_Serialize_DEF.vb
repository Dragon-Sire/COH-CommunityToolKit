Imports System.Text
Imports System.Xml
Imports System.Xml.Serialization
Imports COH.GameContent.HelperFunctions.Attributes

Namespace Utilities
    Public NotInheritable Class COH_DEF_Serialization

#Region "Enums"
        Public Enum DateTimeSerializationMode
            [Default] = 0
            Local = 2
            Roundtrip = 1
        End Enum
        Public Enum ExtendedTypeCode
            [Boolean] = 3
            [Byte] = 6
            [Char] = 4
            DateTime = &H10
            DBNull = 2
            [Decimal] = 15
            [Double] = 14
            Empty = 0
            Int16 = 7
            Int32 = 9
            Int64 = 11
            [Object] = 1
            [SByte] = 5
            [Single] = 13
            [String] = &H12
            UInt16 = 8
            UInt32 = 10
            UInt64 = 12
        End Enum
#End Region

#Region "Private Properties"
        Public ReadOnly Property Settings As COH_Serialization_Settings
            Get
                Return mOptions
            End Get
        End Property
        <EditorBrowsable(COH_DeveloperMode_ShowPrivate)> Private mStringBuilder As Text.StringBuilder
        <EditorBrowsable(COH_DeveloperMode_ShowPrivate)> Private mOptions As COH_Serialization_Settings
        <EditorBrowsable(COH_DeveloperMode_ShowPrivate)> Private mCurrentLevel As Integer
        <EditorBrowsable(COH_DeveloperMode_ShowPrivate)> Private mListTypes_Numeric As List(Of Type)
        <EditorBrowsable(COH_DeveloperMode_ShowPrivate)> Private mListTypes_String As List(Of Type)
#End Region

#Region "Create New Instance"
        Sub New()
            Me.New(New COH_Serialization_Settings(True, Structures.COH_Struct.COH_ExportFormat.CrypticS_TextFormat))
        End Sub
        Public Sub New(ByRef Settings As COH_Serialization_Settings)
            mOptions = Settings
            Initialize()
        End Sub
        Private Sub Initialize()
            mStringBuilder = New Text.StringBuilder
            mCurrentLevel = 0
            Initialize_NumericType()
            Initialize_StringType()
        End Sub
        Private Sub Initialize_NumericType()
            mListTypes_Numeric = New List(Of Type)
            mListTypes_Numeric.Add(GetType(Int16))
            mListTypes_Numeric.Add(GetType(Int32))
            mListTypes_Numeric.Add(GetType(Int64))
            mListTypes_Numeric.Add(GetType(UInt16))
            mListTypes_Numeric.Add(GetType(UInt32))
            mListTypes_Numeric.Add(GetType(UInt64))
            mListTypes_Numeric.Add(GetType(Decimal))
            mListTypes_Numeric.Add(GetType(Single))
            mListTypes_Numeric.Add(GetType(Double))
        End Sub
        Private Sub Initialize_StringType()
            mListTypes_String = New List(Of Type)
            mListTypes_String.Add(GetType(String))
            mListTypes_String.Add(GetType([Shared].CrypticS_String))
            mListTypes_String.Add(GetType([Shared].CrypticS_String_NotLocalizable))
            mListTypes_String.Add(GetType([Shared].CrypticS_NotAligned))
        End Sub
#End Region

#Region "Serialize"
        Public Function Serialize_ToDEF(ByRef Source As Structures.COH_Struct) As String
            Dim CurrentWriter As StringBuilder = mStringBuilder
            CurrentWriter.AppendLine("//Generated by City of Heroes Community ToolKit")
            CurrentWriter.AppendLine("")
            Dim PropertyName As String = Retrieve_ClassName(Source)
            WriteString_TOK_StructStart(CurrentWriter, PropertyName, False)
            Write_Object_Properties(CurrentWriter, Source)
            WriteString_TOKFinish(CurrentWriter)
            Return CurrentWriter.ToString
        End Function
        Public Function RetrieveText() As String
            Return mStringBuilder.ToString
        End Function
        Private Sub Write_Property(ByRef CurrentWriter As StringBuilder, ByRef Source As Object, ByRef SingleProperty As PropertyDescriptor, IsAttribute As Boolean, ByVal Padding As Integer)
            If SingleProperty.PropertyType.IsEnum = True Then
                Write_Property_Enum(CurrentWriter, Source, SingleProperty, Padding)
            ElseIf SingleProperty.PropertyType.IsArray = True Then
                Dim TheTypeCode As TypeCode = Type.GetTypeCode(SingleProperty.PropertyType.GetElementType)
                Select Case TheTypeCode
                    Case TypeCode.Object
                        Write_Property_ChildObjectArray(CurrentWriter, Source, SingleProperty, Padding)
                    Case Else
                        Write_Property_PrimitiveArray(CurrentWriter, Source, SingleProperty, TheTypeCode, IsAttribute, Padding)
                End Select
            Else
                Dim TheTypeCode As TypeCode = Type.GetTypeCode(SingleProperty.PropertyType)
                Select Case TheTypeCode
                    Case TypeCode.Object
                        If HelperFunctions.Interfaces.Determine_ImplementsInterface(SingleProperty.PropertyType, GetType(Interfaces.ISupport_COH_TOK_String)) = True Then
                            Write_Property_TOKString(CurrentWriter, Source, SingleProperty, Padding)
                        ElseIf HelperFunctions.Interfaces.Determine_ImplementsInterface(SingleProperty.PropertyType, GetType(Interfaces.ISupport_COH_TOK_StringArray)) = True Then
                            Write_Property_TOKStringArray(CurrentWriter, Source, SingleProperty, Padding)
                        Else
                            Write_Property_ChildObject(CurrentWriter, Source, SingleProperty, Padding)
                        End If
                    Case Else
                        Write_Property_Primitive(CurrentWriter, Source, SingleProperty, TheTypeCode, Padding)
                End Select
            End If
        End Sub
#End Region

#Region "GetProperties"
        Private Function RetrieveProperties(ByRef Source As Object) As PropertyDescriptor()
            Dim type = GetType(Structures.COH_Struct)
            Dim TheCollection = Source.GetType.GetProperties()
            Dim TheProperties() As PropertyDescriptor = New PropertyDescriptor(TheCollection.Count - 1) {}
            Dim Index As Integer = 0
            For Each Item In TheCollection
                If Item.DeclaringType() = type Then
                    TheProperties(Index) = GetPropertyDescriptor(Item)
                    Index += 1
                End If
            Next
            For Each Item In TheCollection
                If Not Item.DeclaringType() = type Then
                    TheProperties(Index) = GetPropertyDescriptor(Item)
                    Index += 1
                End If
            Next
            Return TheProperties
        End Function
        Public Shared Function GetPropertyDescriptor(ByVal PropertyInfo As Reflection.PropertyInfo) As PropertyDescriptor
            Return TypeDescriptor.GetProperties(PropertyInfo.DeclaringType).Item(PropertyInfo.Name)
        End Function
#End Region

#Region "Write DEF Elements"
        Private Function WriteString_TOKStart(ByRef CurrentWriter As StringBuilder) As Boolean
            CurrentWriter.Append(Build_Indent(mCurrentLevel))
            CurrentWriter.AppendLine("{")
            mCurrentLevel += 1
            Return True
        End Function
        Private Function WriteString_TOKFinish(ByRef CurrentWriter As StringBuilder) As Boolean
            mCurrentLevel -= 1
            CurrentWriter.Append(Build_Indent(mCurrentLevel))
            CurrentWriter.AppendLine("}")
            Return True
        End Function
        Private Function WriteString_TOK_StructStart(ByRef CurrentWriter As StringBuilder, Name As String, Optional NoBracked As Boolean = True) As Boolean
            CurrentWriter.AppendLine(Build_Indent(mCurrentLevel) & Name)
            If NoBracked = False Then CurrentWriter.AppendLine(Build_Indent(mCurrentLevel) & "{")
            mCurrentLevel += 1
            Return True
        End Function
        Private Sub WriteString(ByRef CurrentWriter As StringBuilder, ByVal Name As String, Value As String, ByVal Padding As Integer, Optional UseQuotes As Boolean = True)
            If mOptions.Option_Export_DontWriteEmpty = True AndAlso String.IsNullOrEmpty(Value) Then Exit Sub
            If ((Not Value Is Nothing) AndAlso (Value.Length <> 0)) Then
                CurrentWriter.Append(New String(ChrW(9), mCurrentLevel) & Name)
                If UseQuotes = True AndAlso Value.Contains(ChrW(34)) = False Then
                    CurrentWriter.AppendLine(New String(ChrW(32), Padding - Name.Length) & ChrW(34) & Value & ChrW(34))
                Else
                    CurrentWriter.AppendLine(New String(ChrW(32), Padding - Name.Length) & Value)
                End If
            Else
                'WriteEmptyTag(Name, IsAttribute, "")
                'mCurrentWriter.WriteStartElement(Name, [NameSpace])
                'mCurrentWriter.WriteAttributeString("nil", "http://www.w3.org/2001/XMLSchema-instance", "true")
                'mCurrentWriter.WriteEndElement()
            End If
        End Sub
        Private Sub WriteEmptyTag(ByRef CurrentWriter As StringBuilder, ByVal Name As String, Padding As Integer, Optional Forced As Boolean = False)
            If Forced = False AndAlso mOptions.Option_Export_DontWriteEmpty = True Then Exit Sub
            If ((Not Name Is Nothing) AndAlso (Name.Length <> 0)) Then
                WriteString_TOK_StructStart(CurrentWriter, Name, True)
                WriteString_TOKFinish(CurrentWriter)
            End If
        End Sub
        Private Sub WriteValue(ByRef CurrentWriter As StringBuilder, PropertyName As String, Value As String, Padding As Integer)
            If Padding - PropertyName.Length < 0 Then
                ShowMessage("here")
            End If


            CurrentWriter.Append(New String(ChrW(9), mCurrentLevel) & PropertyName)
            CurrentWriter.AppendLine(New String(ChrW(32), Padding - PropertyName.Length) & Value)
        End Sub
#End Region

#Region "Write Object"
        Private Sub Write_Object_Properties(ByRef CurrentWriter As StringBuilder, ByRef Source As Object)
            Dim TheType As Type = Source.GetType
            Dim TheProperties = Return_PrintableProperties(Source, RetrieveProperties(Source))
            Dim LongestName As Integer = Determine_PaddingLength(Source, TheProperties)
            For Each SingleProperty As PropertyDescriptor In TheProperties
                Write_Property(CurrentWriter, Source, SingleProperty, False, LongestName)
            Next
        End Sub
        Private Sub Write_Object_Properties(ByRef CurrentWriter As StringBuilder, ByRef Source As Object, ByVal Padding As Integer)
            Dim TheType As Type = Source.GetType
            Dim TheProperties = RetrieveProperties(Source)
            Dim AllowWrite As Boolean = True
            Dim Version As COH_VersionRange = Nothing
            For Each SingleProperty As PropertyDescriptor In TheProperties
                AllowWrite = True
                If SingleProperty.IsReadOnly = True Then AllowWrite = False
                If AllowWrite = True AndAlso Retrieve_XMLIgnore(Source, SingleProperty) = True Then AllowWrite = False
                If AllowWrite = True AndAlso Retrieve_XMLDebug(Source, SingleProperty) = True And mOptions.Option_Export_DontWriteDebug Then AllowWrite = False
                If AllowWrite = True AndAlso Retrieve_XMLversion(Source, SingleProperty, Version) = True Then
                    If Settings.Option_Version < Version.MinVersion Or Settings.Option_Version > Version.MaxVersion Then AllowWrite = False
                    'If Settings.Option_Build  
                End If
                If AllowWrite = True Then Write_Property(CurrentWriter, Source, SingleProperty, False, Padding)
            Next
        End Sub
        Private Function Return_PrintableProperties(ByRef Source As Object, ByRef TheProperties As PropertyDescriptor()) As PropertyDescriptor()
            Dim Result As New List(Of PropertyDescriptor)
            Dim AllowWrite As Boolean = True
            Dim Version As COH_VersionRange = Nothing
            For Each SingleProperty As PropertyDescriptor In TheProperties
                AllowWrite = True
                If SingleProperty.IsReadOnly = True Then AllowWrite = False
                If AllowWrite = True AndAlso SingleProperty.Category = "_ProjectFile" AndAlso mCurrentLevel >= 1 Then AllowWrite = False
                If AllowWrite = True AndAlso SingleProperty.Category = "_ProjectFile" AndAlso mOptions.Option_Export_DontWriteProject = True Then AllowWrite = False
                If AllowWrite = True AndAlso SingleProperty.Category = "_ProjectFile" AndAlso HelperFunctions.Interfaces.Determine_ImplementsInterface(Source, GetType(ISupport_COH_OriginolSources)) = False Then AllowWrite = False
                If AllowWrite = True AndAlso Retrieve_XMLIgnore(Source, SingleProperty) = True Then AllowWrite = False
                If AllowWrite = True AndAlso Retrieve_XMLDebug(Source, SingleProperty) = True And mOptions.Option_Export_DontWriteDebug Then AllowWrite = False
                If AllowWrite = True AndAlso Retrieve_XMLversion(Source, SingleProperty, Version) = True Then
                    If Settings.Option_Version < Version.MinVersion Or Settings.Option_Version > Version.MaxVersion Then AllowWrite = False
                    'If Settings.Option_Build  
                End If
                If AllowWrite = True Then
                    Result.Add(SingleProperty)
                End If
            Next
            Return Result.ToArray
        End Function
        Private Function Determine_PaddingLength(ByRef Source As Object, ByRef theProperties As PropertyDescriptor()) As Integer
            Dim LongestName As String = 10
            Dim TempLen As Integer = 0
            Dim AllowWrite As Boolean = True
            For Each SingleProperty As PropertyDescriptor In theProperties
                TempLen = Retrieve_PropertyName(Source, SingleProperty).Length
                If TempLen > LongestName Then LongestName = TempLen
            Next
            LongestName += 5
            Return LongestName
        End Function
        Private Sub Write_Property_ChildObjectArray(ByRef CurrentWriter As StringBuilder, ByRef Parent As Object, ByRef SingleProperty As PropertyDescriptor, ByVal Padding As Integer)
            Dim PropertyName As String = Retrieve_PropertyName(Parent, SingleProperty)
            Dim ItemName As String = Retrieve_PropertyName_ArrayItem(Parent, SingleProperty)
            Dim TheArray As Array = SingleProperty.GetValue(Parent)
            Dim ArrayBuilder As New Text.StringBuilder
            WriteString_TOK_StructStart(ArrayBuilder, PropertyName, True)

            For X = 0 To TheArray.Length - 1
                Dim ChildBuilder As New Text.StringBuilder
                Dim TheValue As Object = TheArray.GetValue(X)
                If (TheValue Is Nothing) Then
                    WriteEmptyTag(ChildBuilder, ItemName, Padding, True)
                Else
                    WriteString_TOK_StructStart(ChildBuilder, ItemName, True)
                    Write_Object_Properties(ChildBuilder, TheValue)
                    WriteString_TOKFinish(ChildBuilder)
                End If
                Dim ChildObject As String = ChildBuilder.ToString
                If IsChildEmpty(ChildObject) = False Then
                    ArrayBuilder.AppendLine()
                    ArrayBuilder.AppendLine(ChildObject)
                End If
            Next
            WriteString_TOKFinish(ArrayBuilder)
            Dim ArrayObject As String = ArrayBuilder.ToString
            If IsChildEmpty(ArrayObject) = False Then
                CurrentWriter.AppendLine(ArrayBuilder.ToString)
            End If
        End Sub
        Private Sub Write_Property_ChildObject(ByRef CurrentWriter As StringBuilder, ByRef Parent As Object, ByRef SingleProperty As PropertyDescriptor, ByVal Padding As Integer)
            Dim PropertyName As String = Retrieve_PropertyName(Parent, SingleProperty)
            Dim ChildBuilder As New Text.StringBuilder
            Dim TheValue As Object = SingleProperty.GetValue(Parent)
            ' Dim DefaultValue As Object = Retrieve_DefaultValue(Parent, SingleProperty)
            If (TheValue Is Nothing) Then
                WriteEmptyTag(ChildBuilder, PropertyName, Padding)
            Else
                WriteString_TOK_StructStart(ChildBuilder, PropertyName, False)
                Write_Object_Properties(ChildBuilder, TheValue)
                WriteString_TOKFinish(ChildBuilder)
            End If
            Dim ChildObject As String = ChildBuilder.ToString
            If IsChildEmpty(ChildObject) = False Then
                CurrentWriter.AppendLine()
                CurrentWriter.AppendLine(ChildObject)
            End If
        End Sub
        Private Function IsChildEmpty(value As String) As Boolean
            value = value.Replace(ChrW(9), "")
            value = value.Replace(ChrW(10), "")
            value = value.Replace(ChrW(13), "")
            Dim Position1 As Integer = value.IndexOf("{")
            Dim Position2 As Integer = value.IndexOf("}")
            If Position2 > -1 AndAlso Position1 > -1 Then
                If Position2 = (Position1 + 1) Then Return True
            ElseIf Position2 > -1 AndAlso Position1 = -1 Then
                Return False
            End If
            Return False
        End Function
#End Region

#Region "Write Primitives - Array"
        Private Sub Write_Property_PrimitiveArray(ByRef CurrentWriter As StringBuilder, ByRef Source As Object, ByRef SingleProperty As PropertyDescriptor, ByVal Padding As Integer)
            Dim PropertyName As String = Retrieve_PropertyName(Source, SingleProperty)
            Dim TheStringArray As String = SingleProperty.GetValue(Source).ToString
            WriteString(CurrentWriter, PropertyName, TheStringArray, Padding, False)
        End Sub
        Private Sub Write_Property_PrimitiveArray(ByRef CurrentWriter As StringBuilder, ByRef Source As Object, ByRef SingleProperty As PropertyDescriptor, TheTypeCode As TypeCode, IsAttribute As Boolean, Padding As Integer)
            If SingleProperty.PropertyType.HasElementType = True Then
                Dim D1 = SingleProperty.PropertyType.GetElementType
                If D1.IsEnum = True Then
                    Write_Property_EnumArray(CurrentWriter, Source, SingleProperty, TheTypeCode, D1, Padding)
                    Exit Sub
                End If
            End If
            Dim PropertyName As String = SingleProperty.Name
            Dim Value As String = ""
            If SingleProperty.PropertyType.UnderlyingSystemType = GetType(Single()) Then
                Dim TheArray2 As Single() = SingleProperty.GetValue(Source)
                Value = Convert_SingleArray(TheArray2)
            ElseIf SingleProperty.PropertyType.UnderlyingSystemType = GetType(Int32()) Then
                Dim TheArray2 As Int32() = SingleProperty.GetValue(Source)
                Value = Convert_IntArray(TheArray2)
            ElseIf SingleProperty.PropertyType.UnderlyingSystemType = GetType(String()) Then
                Dim TheArray2 As String() = SingleProperty.GetValue(Source)
                Value = Convert_StringArray(TheArray2)
            Else

            End If
            If Value Is Nothing Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            Else
                WriteString(CurrentWriter, PropertyName, Value, Padding, False)
            End If
        End Sub
        Private Function Convert_SingleArray(values As Single()) As String
            If values Is Nothing Then Return ""
            Dim Result As String() = New String(values.Count - 1) {}
            For X = 0 To values.Count - 1
                Result(X) = Math.Round(values(X), 6).ToString
            Next
            Return String.Join(", ", Result)
        End Function
        Private Function Convert_IntArray(values As Int32()) As String
            If values Is Nothing Then Return ""
            Dim Result As String() = New String(values.Count - 1) {}
            For X = 0 To values.Count - 1
                Result(X) = values(X).ToString
            Next
            Return String.Join(", ", Result)
        End Function
        Private Function Convert_StringArray(values As String()) As String
            If values Is Nothing Then Return ""
            Return String.Join(", ", values)
        End Function
#End Region

#Region "Write - Interfaces"
        Private Sub Write_Property_TOKString(ByRef CurrentWriter As StringBuilder, ByRef Source As Object, ByRef SingleProperty As PropertyDescriptor, ByVal Padding As Integer)
            Dim TheValue As String = TryCast(SingleProperty.GetValue(Source), ISupport_COH_TOK_String).Convert_ToString(True, True)
            Dim DefaultValue As Object = Retrieve_DefaultValue(Source, SingleProperty)
            Dim PropertyName As String = Retrieve_PropertyName(Source, SingleProperty)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = ""
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False OrElse Not Source.Equals(DefaultValue) Then
                WriteString(CurrentWriter, PropertyName, TheValue, Padding, True)
            End If
        End Sub
        Private Sub Write_Property_TOKStringArray(ByRef CurrentWriter As StringBuilder, ByRef Source As Object, ByRef SingleProperty As PropertyDescriptor, ByVal Padding As Integer)
            Dim TheValue As String = TryCast(SingleProperty.GetValue(Source), ISupport_COH_TOK_StringArray).Convert_ToString(True, False, False)
            Dim PropertyName As String = Retrieve_PropertyName(Source, SingleProperty)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = ""
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            Else
                WriteString(CurrentWriter, PropertyName, TheValue, Padding, False)
            End If
        End Sub
#End Region

#Region "Write Enums"
        Private Sub Write_Property_Enum(ByRef CurrentWriter As StringBuilder, ByRef Source As Object, ByRef SingleProperty As PropertyDescriptor, Padding As Integer)
            Dim DefaultValue As Object = Retrieve_DefaultValue(Source, SingleProperty)
            Dim PropertyName As String = Retrieve_PropertyName(Source, SingleProperty)
            Dim TheValue2 As [Enum] = SingleProperty.GetValue(Source)
            If Retrieve_EnumFlagAttribute(Source, SingleProperty) = True Then
                Write_Property_Enum_Flag(CurrentWriter, PropertyName, DefaultValue, Padding, TheValue2)
            Else
                Write_Property_PrimitiveItem(CurrentWriter, PropertyName, Retrieve_EnumString(TheValue2), DefaultValue, TypeCode.String, Padding)
            End If
        End Sub
        Private Sub Write_Property_Enum_Flag(ByRef CurrentWriter As StringBuilder, PropertyName As String, DefaultValue As Object, Padding As Integer, CurrentEnum As [Enum])
            Dim TheValues As String() = CurrentEnum.ToString.Split(", ")
            If TheValues.Count <= 1 Then
                Write_Property_PrimitiveItem(CurrentWriter, PropertyName, Retrieve_EnumString(CurrentEnum), DefaultValue, TypeCode.String, Padding)
            Else
                Dim NewValues As String() = New String(TheValues.Count - 1) {}
                For X = 0 To TheValues.Count - 1
                    Dim TheEnum As [Enum] = [Enum].Parse(CurrentEnum.GetType, TheValues(X).Trim)
                    NewValues(X) = Retrieve_EnumString(TheEnum)
                Next
                Write_Property_PrimitiveItem(CurrentWriter, PropertyName, String.Join(", ", NewValues), DefaultValue, TypeCode.String, Padding)
            End If
        End Sub
        Private Function Retrieve_EnumString(TheEnum As [Enum]) As String
            Dim EnumV As COH_DefEnum = Nothing
            If Settings.Option_Export_DontWriteEnumOverrides = False AndAlso Retrieve_EnumDescription(TheEnum, EnumV) = True Then
                Return EnumV.DefName
            Else
                Return TheEnum.ToString
            End If
        End Function
        Private Sub Write_Property_EnumArray(ByRef CurrentWriter As StringBuilder, ByRef Source As Object, ByRef SingleProperty As PropertyDescriptor, TheTypeCode As TypeCode, EnumType As Type, Padding As Integer)
            Dim DefaultValue As Object = Retrieve_DefaultValue(Source, SingleProperty)
            Dim PropertyName As String = Retrieve_PropertyName(Source, SingleProperty)
            Dim ItemName As String = Retrieve_PropertyName_ArrayItem(Source, SingleProperty)
            Dim TheArray As Array = SingleProperty.GetValue(Source)
            If TheArray Is Nothing OrElse TheArray.Length = 0 Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding, True)
                Exit Sub
            End If
            Dim IsFlag As Boolean = Retrieve_EnumFlagAttribute(Source, SingleProperty)

            WriteString_TOK_StructStart(CurrentWriter, PropertyName, False)
            For X = 0 To TheArray.Length - 1
                Dim TheValue As Integer = TheArray.GetValue(X)
                Dim TheEnum = [Enum].ToObject(EnumType, TheValue)
                If IsFlag = True Then
                    Write_Property_Enum_Flag(CurrentWriter, ItemName, DefaultValue, Padding, TheEnum)
                Else
                    Write_Property_PrimitiveItem(CurrentWriter, ItemName, Retrieve_EnumString(TheEnum), DefaultValue, TypeCode.String, Padding)
                End If
            Next
            WriteString_TOKFinish(CurrentWriter)
        End Sub
#End Region

#Region "Write Primitives"
        Private Sub Write_Property_Primitive(ByRef CurrentWriter As StringBuilder, ByRef Source As Object, ByRef SingleProperty As PropertyDescriptor, TheTypeCode As TypeCode, ByVal Padding As Integer)
            Dim TheValue As Object = SingleProperty.GetValue(Source)
            Dim DefaultValue As Object = Retrieve_DefaultValue(Source, SingleProperty)
            Dim PropertyName As String = SingleProperty.Name
            Write_Property_PrimitiveItem(CurrentWriter, PropertyName, TheValue, DefaultValue, TheTypeCode, Padding)
        End Sub
        Private Sub Write_Property_PrimitiveItem(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByRef TheValue As Object, ByRef DefaultValue As Object, TheTypeCode As TypeCode, ByVal Padding As Integer)
            Select Case TheTypeCode
                Case TypeCode.Boolean
                    Write_Boolean(CurrentWriter, PropertyName, TheValue, DefaultValue, Padding)
                    Return
                Case TypeCode.String
                    Write_String(CurrentWriter, PropertyName, TheValue, DefaultValue, Padding)
                    Return
                Case TypeCode.Int16
                    Write_INT16(CurrentWriter, PropertyName, TheValue, DefaultValue, Padding)
                    Return
                Case TypeCode.Int32
                    Write_INT32(CurrentWriter, PropertyName, TheValue, DefaultValue, Padding)
                    Return
                Case TypeCode.Int64
                    Write_INT64(CurrentWriter, PropertyName, TheValue, DefaultValue, Padding)
                    Return
                Case TypeCode.UInt16
                    Write_UINT16(CurrentWriter, PropertyName, TheValue, DefaultValue, Padding)
                    Return
                Case TypeCode.UInt32
                    Write_UINT32(CurrentWriter, PropertyName, TheValue, DefaultValue, Padding)
                    Return
                Case TypeCode.UInt64
                    Write_UINT64(CurrentWriter, PropertyName, TheValue, DefaultValue, Padding)
                    Return
                Case TypeCode.Single
                    Write_Single(CurrentWriter, PropertyName, TheValue, DefaultValue, Padding)
                    Return
                Case TypeCode.Double
                    Write_Double(CurrentWriter, PropertyName, TheValue, DefaultValue, Padding)
                    Return
                Case TypeCode.Decimal
                    Write_Decimal(CurrentWriter, PropertyName, TheValue, DefaultValue, Padding)
                    Return
                Case TypeCode.Byte
                    Write_Byte(CurrentWriter, PropertyName, TheValue, DefaultValue, Padding)
                    Return
                Case TypeCode.SByte
                    Write_SByte(CurrentWriter, PropertyName, TheValue, DefaultValue, Padding)
                    Return
                Case TypeCode.DateTime
                    Write_DateTime(CurrentWriter, PropertyName, TheValue, DefaultValue, Padding)
                    Return
            End Select
        End Sub
        Public Sub Write_Byte(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "unsignedByte"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False OrElse Not Source.Equals(thedefault) Then
                WriteValue(CurrentWriter, PropertyName, (CByte(Source)), Padding)
            End If
        End Sub
        Public Sub Write_SByte(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "Byte"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False OrElse Not Source.Equals(thedefault) Then
                WriteValue(CurrentWriter, PropertyName, (CSByte(Source)), Padding)
            End If
        End Sub
        Public Sub Write_Boolean(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "boolean"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False OrElse Not Source.Equals(thedefault) Then
                WriteValue(CurrentWriter, PropertyName, (CBool(Source)), Padding)
            End If
        End Sub
        Public Sub Write_String(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, ByVal Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "string"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False OrElse Not Source.Equals(thedefault) Then
                WriteString(CurrentWriter, PropertyName, CStr(Source), Padding)
            End If
        End Sub
        Public Sub Write_INT16(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "short"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False Then
                WriteValue(CurrentWriter, PropertyName, (CShort(Source)), Padding)
            Else
                Dim SourceValue As Int16 = CShort(Source)
                If Not SourceValue.Equals(CShort(thedefault)) Then WriteValue(CurrentWriter, PropertyName, (SourceValue), Padding)
            End If
        End Sub
        Public Sub Write_INT32(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "int"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False Then
                WriteValue(CurrentWriter, PropertyName, (CInt(Source)), Padding)
            Else
                Dim SourceValue As Int32 = CInt(Source)
                If Not SourceValue.Equals(CInt(thedefault)) Then WriteValue(CurrentWriter, PropertyName, (SourceValue), Padding)
            End If
        End Sub
        Public Sub Write_INT64(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "long"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False Then
                WriteValue(CurrentWriter, PropertyName, (CLng(Source)), Padding)
            Else
                Dim SourceValue As Int64 = CLng(Source)
                If Not SourceValue.Equals(CLng(thedefault)) Then WriteValue(CurrentWriter, PropertyName, (SourceValue), Padding)
            End If
        End Sub
        Public Sub Write_UINT16(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "unsignedShort"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False Then
                WriteValue(CurrentWriter, PropertyName, (CUShort(Source)), Padding)
            Else
                Dim SourceValue As UInt16 = CUShort(Source)
                If Not SourceValue.Equals(CUShort(thedefault)) Then WriteValue(CurrentWriter, PropertyName, (SourceValue), Padding)
            End If
        End Sub
        Public Sub Write_UINT32(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "unsignedInt"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False Then
                WriteValue(CurrentWriter, PropertyName, (CUInt(Source)), Padding)
            Else
                Dim SourceValue As UInt32 = CUInt(Source)
                If Not SourceValue.Equals(CUInt(thedefault)) Then WriteValue(CurrentWriter, PropertyName, (SourceValue), Padding)
            End If
        End Sub
        Public Sub Write_UINT64(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "unsignedLong"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False Then
                WriteValue(CurrentWriter, PropertyName, (CULng(Source)), Padding)
            Else
                Dim SourceValue As UInt64 = CULng(Source)
                If Not SourceValue.Equals(CULng(thedefault)) Then WriteValue(CurrentWriter, PropertyName, (SourceValue), Padding)
            End If
        End Sub
        Public Sub Write_Single(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "float"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False OrElse Not CSng(Source).Equals(CSng(thedefault)) Then
                WriteValue(CurrentWriter, PropertyName, CSng(Source), Padding)
            End If
        End Sub
        Public Sub Write_Double(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "double"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False OrElse Not CDbl(Source).Equals(CDbl(thedefault)) Then
                WriteValue(CurrentWriter, PropertyName, (CDbl(Source)), Padding)
            End If
        End Sub
        Public Sub Write_Decimal(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "decimal"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False Then
                WriteValue(CurrentWriter, PropertyName, (CDec(Source)), Padding)
            Else
                Dim SourceValue As Decimal = CDec(Source)
                If Not SourceValue.Equals(CDec(thedefault)) Then WriteValue(CurrentWriter, PropertyName, (SourceValue), Padding)
            End If
        End Sub
        Public Sub Write_Char(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "char"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False OrElse Not Source.Equals(thedefault) Then
                WriteValue(CurrentWriter, PropertyName, (CChar(Source)), Padding)
            End If
        End Sub
        Public Sub Write_DateTime(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "dateTime"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False OrElse Not Source.Equals(thedefault) Then
                WriteValue(CurrentWriter, PropertyName, FromDateTime(CDate(Source)), Padding)
            End If
        End Sub
        Public Sub Write_QName(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "QName"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False OrElse Not Source.Equals(thedefault) Then
                '//NOT SUPPORTED CURRENTLY
                '//mCurrentWriter.WriteElementString(PropertyName, DirectCast(Source, XmlQualifiedName), IsAttribute)
            End If
        End Sub
        Public Sub Write_TimeSpan(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "TimeSpan"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False OrElse Not Source.Equals(thedefault) Then
                WriteValue(CurrentWriter, PropertyName, (DirectCast(Source, TimeSpan).ToString), Padding)
            End If
        End Sub
        Public Sub Write_GUID(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "TimeSpan"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False OrElse Not Source.Equals(thedefault) Then
                WriteValue(CurrentWriter, PropertyName, (DirectCast(Source, Guid).ToString), Padding)
            End If
        End Sub
        Public Sub Write_Base64Binary(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByVal Source As Object, ByVal thedefault As Object, Padding As Integer)
            If String.IsNullOrEmpty(PropertyName) = True Then PropertyName = "base64Binary"
            If (Source Is Nothing) Then
                WriteEmptyTag(CurrentWriter, PropertyName, Padding)
            ElseIf mOptions.Option_Export_DontWriteDefaults = False OrElse Not Source.Equals(thedefault) Then
                '// WriteValue(CurrentWriter,PropertyName, DirectCast(Source, Byte())), IsAttribute)
            End If
        End Sub
#End Region

#Region "Write Other"
        Private Sub Write_Property_Other(ByRef CurrentWriter As StringBuilder, ByRef Source As Structures.COH_Struct, ByRef SingleProperty As PropertyDescriptor, TheTypeCode As TypeCode, IsAttribute As Boolean)
            Dim TheValue As Object = SingleProperty.GetValue(Source)
            Dim DefaultValue As Object = Retrieve_DefaultValue(Source, SingleProperty)
            Dim PropertyName As String = SingleProperty.Name
            Write_Property_OtherItem(CurrentWriter, PropertyName, TheValue, DefaultValue, SingleProperty.PropertyType, IsAttribute)
        End Sub
        Private Sub Write_Property_OtherItem(ByRef CurrentWriter As StringBuilder, PropertyName As String, ByRef TheValue As Object, ByRef DefaultValue As Object, TheType As Type, IsAttribute As Boolean)
            If (TheType Is GetType(XmlQualifiedName)) Then
                'Write_QName(TheValue)
                'Write_Boolean(PropertyName, TheValue, DefaultValue, IsAttribute)
                Return
            ElseIf (TheType Is GetType(TimeSpan)) Then
                Write_TimeSpan(CurrentWriter, PropertyName, TheValue, DefaultValue, IsAttribute)
                Return
            ElseIf (TheType Is GetType(Guid)) Then
                Write_GUID(CurrentWriter, PropertyName, TheValue, DefaultValue, IsAttribute)
                Return
            End If
        End Sub
#End Region

#Region "Internal Functions"
        Private Function Retrieve_DefaultValue(ByRef Source As Object, ByRef SingleProperty As PropertyDescriptor) As Object
            Dim DefaultValueAttrribute As DefaultValueAttribute = CType(SingleProperty.Attributes(GetType(DefaultValueAttribute)), DefaultValueAttribute)
            Dim DefaultValue As Object = Nothing
            If DefaultValueAttrribute Is Nothing Then
                If Check_TypeIsNumeric(SingleProperty.PropertyType) Then
                    Return 0
                ElseIf Check_TypeIsString(SingleProperty.PropertyType) Then
                    Return String.Empty
                Else
                    Return Nothing
                End If
            Else
                Return DefaultValueAttrribute.Value
            End If
        End Function
        Private Function Check_TypeIsNumeric(TheType As Type) As Boolean
            Return mListTypes_Numeric.Contains(TheType)
        End Function
        Private Function Check_TypeIsString(TheType As Type) As Boolean
            Return mListTypes_String.Contains(TheType)
        End Function

        Private Function FromDateTime(ByVal value As DateTime) As String
            If (mOptions.Option_DateFormat = DateTimeSerializationMode.Local) Then
                'Return(value, "yyyy-MM-ddTHH:mm:ss.fffffffzzzzzz")
            End If
            'Return(value, XmlDateTimeSerializationMode.RoundtripKind)
        End Function
#End Region

#Region "OLD"
        Private Function WriteString_SingleStructName(ByRef CurrentWriter As Text.StringBuilder, ByRef CurrentIndentLevel As Integer, Name As String) As Boolean
            CurrentWriter.Append(Build_Indent(CurrentIndentLevel))
            CurrentWriter.AppendLine(Name)
            Return True
        End Function
        Private Function WriteString_Comment(ByRef CurrentWriter As Text.StringBuilder, ByRef CurrentIndentLevel As Integer, Comment As String) As Boolean
            CurrentWriter.Append(Build_Indent(CurrentIndentLevel))
            CurrentWriter.AppendLine("//" & Comment)
            Return True
        End Function
        Private Function WriteString_Pair(ByRef CurrentWriter As Text.StringBuilder, ByRef CurrentIndentLevel As Integer, PropertyName As String, Value As String, Optional WithQuotes As Boolean = True) As Boolean
            If Value = "" Then  '//IGNORE IT
                CurrentWriter.Append(Build_Indent(CurrentIndentLevel))
                CurrentWriter.AppendLine("//" & PropertyName & " = NOTHING ")
                Return True
            End If
            CurrentWriter.Append(Build_Indent(CurrentIndentLevel))
            If WithQuotes = True Then
                CurrentWriter.AppendLine(PropertyName & " " & ChrW(34) & Value & ChrW(34))
            Else
                CurrentWriter.AppendLine(PropertyName & " " & Value)
            End If
            Return True
        End Function
        Private Function WriteString_Pair(ByRef CurrentWriter As Text.StringBuilder, ByRef CurrentIndentLevel As Integer, PropertyName As String, Value As UInt32) As Boolean
            If Value = 0 Then
                CurrentWriter.Append(Build_Indent(CurrentIndentLevel))
                CurrentWriter.AppendLine("//" & PropertyName & " " & Value)
                Return True
            End If
            CurrentWriter.Append(Build_Indent(CurrentIndentLevel))
            CurrentWriter.AppendLine(PropertyName & " " & Value)
            Return True
        End Function
        Private Function WriteString_Pair(ByRef CurrentWriter As Text.StringBuilder, ByRef CurrentIndentLevel As Integer, PropertyName As String, Value As Int32) As Boolean
            If Value = 0 Then
                CurrentWriter.Append(Build_Indent(CurrentIndentLevel))
                CurrentWriter.AppendLine("//" & PropertyName & " " & Value)
                Return True
            End If
            CurrentWriter.Append(Build_Indent(CurrentIndentLevel))
            CurrentWriter.AppendLine(PropertyName & " " & Value)
            Return True
        End Function
        Private Function WriteString_Pair(ByRef CurrentWriter As Text.StringBuilder, ByRef CurrentIndentLevel As Integer, PropertyName As String, Value As Double) As Boolean
            If Value = 0 Then
                CurrentWriter.Append(Build_Indent(CurrentIndentLevel))
                CurrentWriter.AppendLine("//" & PropertyName & " " & Value)
                Return True
            End If
            CurrentWriter.Append(Build_Indent(CurrentIndentLevel))
            CurrentWriter.AppendLine(PropertyName & " " & Value)
            Return True
        End Function
        Private Function WriteString_Pair(ByRef CurrentWriter As Text.StringBuilder, ByRef CurrentIndentLevel As Integer, PropertyName As String, Value As Single) As Boolean
            If Value = 0 Then
                CurrentWriter.Append(Build_Indent(CurrentIndentLevel))
                CurrentWriter.AppendLine("//" & PropertyName & " " & Value)
                Return True
            End If
            CurrentWriter.Append(Build_Indent(CurrentIndentLevel))
            CurrentWriter.AppendLine(PropertyName & " " & Value)
            Return True
        End Function
        Private Function WriteString_PairEnum(ByRef CurrentWriter As Text.StringBuilder, ByRef CurrentIndentLevel As Integer, PropertyName As String, EnumType As System.Type, Value As Int32) As Boolean
            CurrentWriter.Append(Build_Indent(CurrentIndentLevel))
            Dim T1 As [Enum] = [Enum].ToObject(EnumType, Value)
            CurrentWriter.AppendLine(PropertyName & " " & Value & " ' " & T1.ToString)
            Return True
        End Function
        Private Function Build_Indent(CurrentIndentLevel As Integer) As String
            Return New String(ChrW(9), CurrentIndentLevel)
        End Function
#End Region

    End Class
End Namespace